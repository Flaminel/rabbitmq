forceRedeploy: true

configMaps:
  - name: plugins-config
    data:
      enabled_plugins: |-
        [rabbitmq_management].

statefulSet:
  serviceName: service
  serviceAccountName: service-account
  replicas: 1
  containers:
    - name: rabbitmq
      image:
        repository: rabbitmq
        tag: 3-management-alpine
      lifecycle:
        postStart:
          exec:
            command: ["/bin/sh", "-c", '
              echo "Waiting for RabbitMQ to start...";
              while ! rabbitmqctl status --erlang-cookie $CUSTOM_ERLANG_COOKIE > /dev/null 2>&1; do
                echo "RabbitMQ not ready, waiting...";
                sleep 5;
              done;
              echo "RabbitMQ is ready.";

              existing_password=$(rabbitmqctl authenticate_user $RABBITMQ_DEFAULT_USER $RABBITMQ_PASS --erlang-cookie $CUSTOM_ERLANG_COOKIE 2>&1);
              if echo "$existing_password" | grep -q "authenticated successfully"; then
                echo "Password already set, skipping password change.";
              else
                echo "Changing password...";
                rabbitmqctl change_password $RABBITMQ_DEFAULT_USER $RABBITMQ_PASS --erlang-cookie $CUSTOM_ERLANG_COOKIE;
              fi']
      ports:
        - name: tcp
          containerPort: 5672
          protocol: TCP
        - name: udp
          containerPort: 5672
          protocol: UDP
        - name: stats
          containerPort: 15672
      resources:
        requests:
          cpu: 0m
          memory: 0Mi
        limits:
          cpu: 1000m
          memory: 512Mi
      env:
        - name: K8S_SERVICE_NAME
          value: service
        - name: K8S_ADDRESS_TYPE
          value: hostname
        - name: RABBITMQ_FORCE_BOOT
          value: "false"
        - name: RABBITMQ_NODE_NAME
          value: "rabbit@$(MY_POD_NAME).$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local"
        - name: K8S_HOSTNAME_SUFFIX
          value: ".$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.cluster.local"
        - name: RABBITMQ_MNESIA_DIR
          value: "/var/lib/rabbitmq/mnesia/$(RABBITMQ_NODE_NAME)"
        - name: RABBITMQ_LDAP_ENABLE
          value: "no"
        - name: RABBITMQ_LOGS
          value: "-"
        - name: RABBITMQ_ULIMIT_NOFILES
          value: "65536"
        - name: RABBITMQ_USE_LONGNAME
          value: "true"
        - name: RABBITMQ_SECURE_PASSWORD
          value: "no"
        - name: RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS
          value: -setcookie $(CUSTOM_ERLANG_COOKIE)
      envFromSecret:
        - secretName: rabbitmq-secret
          envs:
            - name: RABBITMQ_DEFAULT_USER
              key: USERNAME
            - name: RABBITMQ_PASS
              key: PASSWORD
            - name: RABBITMQ_DEFAULT_PASS
              key: DEFAULT_PASSWORD
            - name: CUSTOM_ERLANG_COOKIE
              key: ERLANG_COOKIE
      envFromFieldRef:
        - name: MY_POD_NAMESPACE
          fieldPath: metadata.namespace
        - name: MY_POD_NAME
          fieldPath: metadata.name
        - name: MY_POD_IP
          fieldPath: status.podIP
      volumeMounts:
        - name: configuration
          mountPath: /etc/rabbitmq
        - name: storage
          mountPath: /var/lib/rabbitmq/mnesia
          subPath: rabbitmq
  volumes:
    - name: configuration
      projected:
        - type: secret
          typeName: config-secret
        - type: configMap
          typeName: plugins-config
    - name: storage
      type: pvc
      typeName: storage-pvc

ingress:
  name: ingress
  tls:
    secretName: tls-secret
  hosts:
    - host: rmq.@vault(secrets/data/domain main | DOMAIN_NAME)
      paths:
        - path: "/"
          pathType: Prefix
          serviceName: service
          servicePort: stats

pvcs:
  - name: storage-pvc
    storageClassName: local-path-persistent
    accessModes:
      - ReadWriteOnce
    size: 1Gi
    volumeMode: Filesystem

secrets:
  - name: config-secret
    type: Opaque
    data:
      rabbitmq.conf: |-
        # Ports
        listeners.tcp.default = 5672
        ## Clustering
        ##
        cluster_formation.peer_discovery_backend  = rabbit_peer_discovery_k8s
        cluster_formation.k8s.host = kubernetes.default.svc.cluster.local
        cluster_formation.node_cleanup.interval = 10
        cluster_formation.node_cleanup.only_log_warning = true
        cluster_partition_handling = autoheal
        # queue master locator
        queue_master_locator = min-masters
        # enable guest user
        loopback_users.guest = false
        ## Prometheus metrics
        ##
        # prometheus.tcp.port = 9419
        ## Memory Threshold
        ## 134217728 bytes = 128Mi
        # total_memory_available_override_value = 134217728
        # 0.9 = 90%
        vm_memory_high_watermark.relative = 0.9

serviceAccount:
  name: service-account
  automountServiceAccountToken: true
  secretName: service-account-token

services:
  - name: service
    type: ClusterIP
    ports:
      - name: tcp
        protocol: TCP
        port: 5672
        targetPort: tcp
      - name: udp
        protocol: UDP
        port: 5672
        targetPort: udp
      - name: stats
        protocol: TCP
        port: 15672

vaultSecrets:
  - name: tls-secret
    type: kubernetes.io/tls
    path: secrets/certificates
    templates:
      tls.crt: "{% .Secrets.tls_crt %}"
      tls.key: "{% .Secrets.tls_key %}" 
  - name: rabbitmq-secret
    path: secrets/rabbitmq
    templates:
      DEFAULT_PASSWORD: "{% .Secrets.default_password %}"
      ERLANG_COOKIE: "{% .Secrets.erlang_cookie %}"
      PASSWORD: "{% .Secrets.password %}"
      USERNAME: "{% .Secrets.username %}"